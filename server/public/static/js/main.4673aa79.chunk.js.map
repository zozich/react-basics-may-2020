{"version":3,"sources":["components/Body/Body.js","components/Header/Header.js","components/Footer/Footer.js","components/Loading/Loading.js","App.js","serviceWorker.js","index.js"],"names":["Body","emails","this","props","console","log","emailCards","map","email","className","key","id","topic","React","Component","Header","user","title","name","age","PureComponent","Footer","changeTitle","incrementAge","onClick","Loading","App","state","currentUser","setState","axios","get","then","res","setTimeout","data","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2SAsBeA,G,mLAhBD,IACEC,EAAWC,KAAKC,MAAhBF,OAERG,QAAQC,IAAI,iBAAkBJ,GAElC,IAAMK,EAAaL,EAAOM,KAAI,SAAAC,GAAK,OAAI,yBAAKC,UAAU,cAAcC,IAAKF,EAAMG,IAAKH,EAAMI,UAEtF,OACI,oCACI,4CACCN,O,GAXEO,IAAMC,YCaVC,E,uKAfD,IAAD,EACmBb,KAAKC,MAArBa,EADH,EACGA,KAAMC,EADT,EACSA,MAId,OAFAb,QAAQC,IAAI,iBAAkBH,MAG1B,oCACI,4BAAKe,GACL,6CAAmBD,EAAKE,MACxB,4CAAkBF,EAAKG,U,GAVlBC,iBCcNC,E,uKAbD,IAAD,EACiCnB,KAAKC,MAAnCmB,EADH,EACGA,YAAaC,EADhB,EACgBA,aAErB,OACI,oCACI,8CACA,4BAAQC,QAASF,GAAjB,gBACA,4BAAQE,QAASD,GAAjB,sB,GARKH,iB,iBCQNK,E,uKANP,OACI,8C,GAHUL,iBCmEPM,E,4MAtDbC,MAAQ,CACNC,YAAa,CACXV,KAAM,SACNC,IAAK,IAEPF,MAAO,0BACPhB,OAAQ,I,EAGVqB,YAAc,WACZ,EAAKO,SAAS,CAAEZ,MAAO,e,EAGzBM,aAAe,WACb,EAAKM,SAAS,CACZD,YAAY,2BACP,EAAKD,MAAMC,aADL,IAETT,IAAK,EAAKQ,MAAMC,YAAYT,IAAM,O,kEAKnB,IAAD,OAClBf,QAAQC,IAAI,+BAEZyB,IAAMC,IAAI,WACPC,MAAK,SAAAC,GACJC,YAAW,WACT,EAAKL,SAAS,CAAE5B,OAAQgC,EAAIE,SAC3B,U,2CAKP/B,QAAQC,IAAI,kC,+BAGJ,IAAD,EACgCH,KAAKyB,MAApCC,EADD,EACCA,YAAaX,EADd,EACcA,MAAOhB,EADrB,EACqBA,OAE5B,OAAsB,IAAlBA,EAAOmC,OACF,kBAAC,EAAD,MAIP,yBAAK3B,UAAU,OACb,kBAAC,EAAD,CAAQO,KAAMY,EAAaX,MAAOA,IAClC,kBAAC,EAAD,CAAMhB,OAAQA,IACd,kBAAC,EAAD,CAAQqB,YAAapB,KAAKoB,YAAaC,aAAcrB,KAAKqB,oB,GAvDhDV,IAAMC,WCIJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.4673aa79.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Body.scss';\r\n\r\n// Styled components, CSS Modules, JSS\r\n\r\nclass Body extends React.Component {\r\n    render() {\r\n        const { emails } = this.props;\r\n\r\n        console.log('Emails in Body', emails);\r\n\r\n    const emailCards = emails.map(email => <div className='email__card' key={email.id}>{email.topic}</div>)\r\n\r\n        return (\r\n            <>\r\n                <h2>This is body</h2>\r\n                {emailCards}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Body;","import React, { PureComponent } from 'react'\r\n\r\nclass Header extends PureComponent {\r\n    render() {\r\n        const { user, title } = this.props;\r\n\r\n        console.log('Header.js this', this)\r\n\r\n        return (\r\n            <>\r\n                <h2>{title}</h2>\r\n                <h2>Your name is: {user.name}</h2>\r\n                <h3>Your age is: {user.age}</h3>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React, { PureComponent } from 'react'\r\n\r\nclass Footer extends PureComponent {\r\n    render() {\r\n        const { changeTitle, incrementAge } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <h2>This is footer</h2>\r\n                <button onClick={changeTitle}>Change title</button>\r\n                <button onClick={incrementAge}>Increment Age</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React, { PureComponent } from 'react'\r\n\r\nclass Loading extends PureComponent {\r\n    render() {\r\n        return (\r\n            <h1>Loading...</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loading","import React from 'react';\nimport './App.css';\nimport Body from './components/Body/Body';\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\nimport axios from 'axios';\nimport Loading from './components/Loading/Loading';\n\nclass App extends React.Component {\n  // constructor (props) {\n  //   super(props);\n\n  //   this.state = {}\n  // }\n\n  state = {\n    currentUser: {\n      name: 'Andrew',\n      age: 32\n    },\n    title: 'Hello from my React app',\n    emails: []\n  }\n\n  changeTitle = () => {\n    this.setState({ title: 'New title' });\n  }\n\n  incrementAge = () => {\n    this.setState({\n      currentUser: {\n        ...this.state.currentUser,\n        age: this.state.currentUser.age + 2\n      }\n    })\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount in App.js');\n\n    axios.get('/emails')\n      .then(res => {\n        setTimeout(() => {\n          this.setState({ emails: res.data })\n        }, 2000);\n      })\n  }\n\n  componentDidUpdate() {\n    console.log('componentDidUpdate in App.js');\n  }\n\n  render() {\n    const { currentUser, title, emails } = this.state;\n\n    if (emails.length === 0) {\n      return <Loading />\n    }\n\n    return (\n      <div className=\"App\">\n        <Header user={currentUser} title={title} />\n        <Body emails={emails} />\n        <Footer changeTitle={this.changeTitle} incrementAge={this.incrementAge} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}